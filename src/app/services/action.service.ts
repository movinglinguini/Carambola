import { ActionGenerators } from './../action-generators/index';
import { IAction } from '../interfaces/action.interface';
import { BasePropService } from './base-prop.service';
import { Injectable } from '@angular/core';
import { environment } from 'src/environments/environment';

interface IDBAction extends IAction {
  _id: string;
}

type ActionGenerator = (opts?: any) => IAction[];


/**
 * Service for managing actions, new decision events, and the effects that
 * actions have on advisors.
 */
@Injectable({
  providedIn: 'root'
})
export class ActionService extends BasePropService {

  constructor() {
    super('Actions');
  }
  /**
   * Generates actions given the generator in the module at `actionGeneratorName`.
   * @sideeffect Adds the actions to the `Actions` database.
   * @returns List of actions generated by file.
   */
  public async generateActions(): Promise<IDBAction[]> {
    await this.clearTable();
    const generator = await this.loadActionGenerator(environment.actionGeneratorMeta.name);
    const actions: IDBAction[] = generator(environment.actionGeneratorMeta.opts)
      .map((act) => ({
        _id: act.name,
        ...act,
      }));

    // save actions to db
    await this._db.bulkDocs(actions);
    return actions;
  }

  public async getAllActions(): Promise<IDBAction[]> {
    return (await this._db.allDocs({
      include_docs: true
    })).rows.map(r => (r.doc as unknown) as IDBAction);
  }

  private async loadActionGenerator(actionGeneratorName: string): Promise<ActionGenerator> {
    return ActionGenerators.get(actionGeneratorName) as ActionGenerator;
  }
}
